name: CI/CD Pipeline

on:
    push:
        branches: [main, master, idk]
    pull_request:
        branches: [main, master, idk]

permissions:
    contents: read
    packages: write
    packages-pull: true
    packages-push: true

jobs:
    test-and-deploy:
        runs-on: ubuntu-latest
        env:
            REGISTRY: ghcr.io

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Set image name
              run: |
                  owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
                  echo "Owner: $owner"
                  echo "IMAGE_NAME=${owner}/se_inv" >> $GITHUB_ENV
                  echo "Full image name will be: $REGISTRY/${owner}/se_inv"

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=latest,enable=true
                      type=sha,enable=true,priority=100,prefix=,suffix=,format=short

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Build and push Docker image
              id: docker_build
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Print Docker build result
              run: |
                  echo "Docker build status: ${{ steps.docker_build.outcome }}"
                  echo "Image digest: ${{ steps.docker_build.outputs.digest }}"
                  echo "Metadata: ${{ steps.meta.outputs.tags }}"

            - name: Verify image exists
              run: |
                  echo "Verifying image exists..."
                  echo "Full image name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
                  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                  echo "Image verified successfully!"

            - name: Run Tests
              run: |
                  echo "Running tests with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
                  docker compose -f docker-compose.yml up -d
                  # Wait for PostgreSQL to be ready
                  echo "Waiting for PostgreSQL to be ready..."
                  timeout 15s bash -c 'until docker compose -f docker-compose.yml exec -T db pg_isready -U postgres; do sleep 1; done'
                  # Run the tests
                  docker compose -f docker-compose.yml exec -T web python manage.py test

            - name: Deploy to Server
              uses: appleboy/ssh-action@master
              env:
                  DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SERVER_KEY }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: 22
                  envs: DOCKER_IMAGE
                  script: |
                      echo "Starting deployment..."
                      echo "Using image: $DOCKER_IMAGE"
                      cd ~/locker || exit 1
                      echo "Stopping existing containers..."
                      docker compose -f docker-compose.prod.yml down || true
                      echo "Removing old image..."
                      docker image rm $DOCKER_IMAGE || true
                      echo "Logging into GitHub Container Registry..."
                      echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                      echo "Pulling new image..."
                      docker pull $DOCKER_IMAGE
                      echo "Starting new containers..."
                      REGISTRY=${{ env.REGISTRY }} IMAGE_NAME=${{ env.IMAGE_NAME }} TAG=latest docker compose -f docker-compose.prod.yml up -d
                      echo "Deployment complete!"
