name: CI/CD Pipeline

on:
    push:
        branches: [idk]
    pull_request:
        branches: [idk]

permissions:
    contents: read
    packages: write

jobs:
    test-and-deploy:
        runs-on: ubuntu-latest
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ toLowerCase(github.repository) }}

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Set lowercase image name
              run: |
                  echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=latest,enable=true
                      type=sha,enable=true,priority=100,prefix=,suffix=,format=short

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Run Tests
              run: |
                  docker compose -f docker-compose.yml up -d
                  # Wait for PostgreSQL to be ready
                  echo "Waiting for PostgreSQL to be ready..."
                  timeout 15s bash -c 'until docker compose -f docker-compose.yml exec -T db pg_isready -U postgres; do sleep 1; done'
                  # Run the tests
                  docker compose -f docker-compose.yml exec -T web python manage.py test

            - name: Deploy to Server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  script: |
                      cd ~/locker
                      docker compose -f docker-compose.prod.yml down
                      docker image rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
                      docker compose -f docker-compose.prod.yml pull
                      docker compose -f docker-compose.prod.yml up -d
